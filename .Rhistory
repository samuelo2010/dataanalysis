example("mean")
BiocInstaller()
###Installing bioconductor
source("https://bioconductor.org/biocLite.R")
BiocManager::install(version = "3.9")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
### we will be using bioinstaller package to intall and check package versions
##load biocintaller package
library(BiocInstaller)
##Install and load biocinstaller package
biocLite("BiocInstaller")
BiocManager::install(c("BiocInstaller", "AnnotationDbi"))
BiocManager::install(c("BiocInstaller", "AnnotationDbi"))
BiocManager::install(BiocInstaller)
library(BiocManager)
detach("package:BiocManager", unload = TRUE)
library(BiocManager)
### we will be using bioinstaller package to intall and check package versions
##load biocintaller package
library(BiocInstaller)
BiocManager::install(BiocInstaller)
BiocManager::install()
biocVersion()
BiocManager::available()
library(BSgenome)
library(BiocManager)
BiocManager::install(BSgenome.Scerevisiae.UCSC.sacCer3)
(BSgenome.Scerevisiae.UCSC.sacCer3)
BiocManager::install("BSgenome.Scerevisiae.UCSC.sacCer3")
a
library("BSgenome.Scerevisiae.UCSC.sacCer3")
## create a yeast object from package
yeast<-BSgenome.Scerevisiae.UCSC.sacCer3
#get length
length(yeast)
#get chromosomes names
names(yeast)
#get length
length(yeast)
getSeq(yeast)
# Select chromosome sequence by name, one or many
getSeq(yeast, "chrM")
getSeq(yeast,"chr X")
getSeq(yeast,"chrX")
#count characters in the sequence
nchar(yeast$chrX)
#count characters in the sequence
nchar(yeast$chrI)
#count characters in the sequence
nchar(yeast$chrII)
#count characters in the sequence
nchar(yeast$chrIII)
#get chrom M sequence 245-1000
getSeq(yeast, names="chrM",start=245,end=1000)
#get number of sequences of the above
nchar(getSeq(yeast, names="chrM",start=245,end=1000))
#get available genomes
available.genomes()
#get available genomes
available.genomes()
library(BSgenome)
#get available genomes
available.genomes()
#get available genomes
available.genomes()
library(BiocManager)
#get available genomes
available.genomes()
library(BSgenome.Scerevisiae.UCSC.sacCer3)
#get available genomes
available.genomes()
## create a yeast object from package
yeast<-BSgenome.Scerevisiae.UCSC.sacCer3
library("BSgenome.Scerevisiae.UCSC.sacCer3")
library(rtracklayer)
#get available genomes
available.genomes()
library(Biobase)
#get available genomes
available.genomes()
library(codetools)
#get available genomes
available.genomes()
BiocManager::install("BSgenome.Scerevisiae.UCSC.sacCer3")
#get available genomes
available.genomes()
library("BSgenome.Scerevisiae.UCSC.sacCer3")
## create a yeast object from package
yeast<-BSgenome.Scerevisiae.UCSC.sacCer3
BiocManager::install()
detach("package:GenomicRanges", unload = TRUE)
detach("package:GenomeInfoDb", unload = TRUE)
detach("package:IRanges", unload = TRUE)
detach("package:rtracklayer", unload = TRUE)
detach("package:S4Vectors", unload = TRUE)
detach("package:XVector", unload = TRUE)
library(Biostrings)
alphabet("zikaVirus")
available.genomes()
#get available genomes
available.genomes()
BiocManager::install(“BSgenome.Scerevisiae.UCSC.sacCer3”)
BiocManager::install("BSgenome")
#install zika virus
BiocManager::install("BSgenome.ZikaVirus")
version()
available.genomes()
#get length
length(yeast)
library(GenomicRanges)
library(GenomeInfoDbData)
BiocManager::available()
library(BSgenome)
BiocManager::install(BSgenome)
BiocManager::install()
library(Biostrings)
available.genomes()
BiocManager::install("BSgenome")
available.genomes()
BiocManager::available.genomes()
BiocManager::install("BSgenome.Scerevisiae.UCSC.sacCer3")
library("BSgenome.Scerevisiae.UCSC.sacCer3")
## create a yeast object from package
yeast<-BSgenome.Scerevisiae.UCSC.sacCer3
library("BSgenome.Scerevisiae.UCSC.sacCer3")
library(BSgenome.Scerevisiae.UCSC.sacCer3)
library(rtracklayer)
#get available genomes
available.genomes("BSgenome")
install.packages(c("backports", "BiocManager", "digest", "ellipsis", "lambda.r", "pkgconfig"))
source('C:/Users/USER/Desktop/anaconda/rstudio/Rstudio_prac.R', echo=TRUE)
library(GEOquery)
setwd("C:/Users/USER/Desktop/dataanalysis")
library(tidyverse)
##c. load the vldata
vldata<-read.csv("vldata_csv.csv")
###2. Data cleaning
##a. Viralload variable
#i.remove misssing viral load test outcome
data1<-vldata %>%
select(everything()) %>%
filter(!Viral.Load %in% c("","Collet New Sample"))
##check for the values
unique(data1$Viral.Load)#removed missing values under viral load outcome
#ii. convert ldl and < values to 0
data1$Viral.Load[data1$Viral.Load %in% c("< LDL ","< 400  ","< 150 ")]<-"0"
View(data1)
##check for the values
unique(data1$Viral.Load)#removed missing values under viral load outcome
data1$Viral.Load<-as.numeric(data1$Viral.Load)
unique(data1$Viral.Load)
data2 %>%
select(everything())%>%
filter(data1$Viral.Load==NA)
data2<-data1 %>%
select(everything())%>%
filter(data1$Viral.Load==NA)
View(data2)
#check of any record is converted to NAs
data2<-data1 %>%
select(everything())%>%
filter(is.na(data1$Viral.Load))
View(data2)
View(data2)
View(data2)
View(data1)
